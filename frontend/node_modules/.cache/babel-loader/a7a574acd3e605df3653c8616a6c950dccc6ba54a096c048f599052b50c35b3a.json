{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CD\\\\Desktop\\\\Trust_Me\\\\frontend\\\\src\\\\utils\\\\Fullscreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FullscreenButton = () => {\n  _s();\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const toggleFullscreen = () => {\n    if (!document.fullscreenElement) {\n      // Enter fullscreen mode\n      if (document.documentElement.requestFullscreen) {\n        document.documentElement.requestFullscreen();\n      } else if (document.documentElement.mozRequestFullScreen) {\n        /* Firefox */\n        document.documentElement.mozRequestFullScreen();\n      } else if (document.documentElement.webkitRequestFullscreen) {\n        /* Chrome, Safari and Opera */\n        document.documentElement.webkitRequestFullscreen();\n      } else if (document.documentElement.msRequestFullscreen) {\n        /* IE/Edge */\n        document.documentElement.msRequestFullscreen();\n      }\n      setIsFullscreen(true);\n    } else {\n      // Exit fullscreen mode\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        /* Firefox */\n        document.mozCancelFullScreen();\n      } else if (document.webkitExitFullscreen) {\n        /* Chrome, Safari and Opera */\n        document.webkitExitFullscreen();\n      } else if (document.msExitFullscreen) {\n        /* IE/Edge */\n        document.msExitFullscreen();\n      }\n      setIsFullscreen(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: toggleFullscreen,\n    className: \"navText\",\n    children: isFullscreen ? 'Exit Fullscreen' : 'Fullscreen'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(FullscreenButton, \"LI0KkFuciCdLvQ6T7dAtFOAXj0Y=\");\n_c = FullscreenButton;\nexport default FullscreenButton;\nvar _c;\n$RefreshReg$(_c, \"FullscreenButton\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FullscreenButton","_s","isFullscreen","setIsFullscreen","toggleFullscreen","document","fullscreenElement","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/CD/Desktop/Trust_Me/frontend/src/utils/Fullscreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst FullscreenButton = () => {\r\n  const [isFullscreen, setIsFullscreen] = useState(false);\r\n\r\n  const toggleFullscreen = () => {\r\n    if (!document.fullscreenElement) {\r\n      // Enter fullscreen mode\r\n      if (document.documentElement.requestFullscreen) {\r\n        document.documentElement.requestFullscreen();\r\n      } else if (document.documentElement.mozRequestFullScreen) { /* Firefox */\r\n        document.documentElement.mozRequestFullScreen();\r\n      } else if (document.documentElement.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\r\n        document.documentElement.webkitRequestFullscreen();\r\n      } else if (document.documentElement.msRequestFullscreen) { /* IE/Edge */\r\n        document.documentElement.msRequestFullscreen();\r\n      }\r\n      setIsFullscreen(true);\r\n    } else {\r\n      // Exit fullscreen mode\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen();\r\n      } else if (document.mozCancelFullScreen) { /* Firefox */\r\n        document.mozCancelFullScreen();\r\n      } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\r\n        document.webkitExitFullscreen();\r\n      } else if (document.msExitFullscreen) { /* IE/Edge */\r\n        document.msExitFullscreen();\r\n      }\r\n      setIsFullscreen(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div onClick={toggleFullscreen} className='navText'>\r\n      {isFullscreen ? 'Exit Fullscreen' : 'Fullscreen'}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FullscreenButton;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMO,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI,CAACC,QAAQ,CAACC,iBAAiB,EAAE;MAC/B;MACA,IAAID,QAAQ,CAACE,eAAe,CAACC,iBAAiB,EAAE;QAC9CH,QAAQ,CAACE,eAAe,CAACC,iBAAiB,CAAC,CAAC;MAC9C,CAAC,MAAM,IAAIH,QAAQ,CAACE,eAAe,CAACE,oBAAoB,EAAE;QAAE;QAC1DJ,QAAQ,CAACE,eAAe,CAACE,oBAAoB,CAAC,CAAC;MACjD,CAAC,MAAM,IAAIJ,QAAQ,CAACE,eAAe,CAACG,uBAAuB,EAAE;QAAE;QAC7DL,QAAQ,CAACE,eAAe,CAACG,uBAAuB,CAAC,CAAC;MACpD,CAAC,MAAM,IAAIL,QAAQ,CAACE,eAAe,CAACI,mBAAmB,EAAE;QAAE;QACzDN,QAAQ,CAACE,eAAe,CAACI,mBAAmB,CAAC,CAAC;MAChD;MACAR,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC,MAAM;MACL;MACA,IAAIE,QAAQ,CAACO,cAAc,EAAE;QAC3BP,QAAQ,CAACO,cAAc,CAAC,CAAC;MAC3B,CAAC,MAAM,IAAIP,QAAQ,CAACQ,mBAAmB,EAAE;QAAE;QACzCR,QAAQ,CAACQ,mBAAmB,CAAC,CAAC;MAChC,CAAC,MAAM,IAAIR,QAAQ,CAACS,oBAAoB,EAAE;QAAE;QAC1CT,QAAQ,CAACS,oBAAoB,CAAC,CAAC;MACjC,CAAC,MAAM,IAAIT,QAAQ,CAACU,gBAAgB,EAAE;QAAE;QACtCV,QAAQ,CAACU,gBAAgB,CAAC,CAAC;MAC7B;MACAZ,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,oBACEJ,OAAA;IAAKiB,OAAO,EAAEZ,gBAAiB;IAACa,SAAS,EAAC,SAAS;IAAAC,QAAA,EAChDhB,YAAY,GAAG,iBAAiB,GAAG;EAAY;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV,CAAC;AAACrB,EAAA,CApCID,gBAAgB;AAAAuB,EAAA,GAAhBvB,gBAAgB;AAsCtB,eAAeA,gBAAgB;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}